<script>

var territoryColors = <%= render partial: "territory_colors", locals: {territoryColors: @territoryColors} %>;
rendered_forts = [<%= render partial: "fort", collection: @forts %>];
rendered_encampments = [<%= render partial: "encampment", collection: @encampments %>];

var fort_string = rendered_forts.toString();
fort_string = fort_string.replace(",","', '");
fort_string = fort_string.concat("'");
fort_string = "'".concat(fort_string);

var encampment_string = rendered_encampments.toString();
encampment_string = encampment_string.replace(",","', '");
encampment_string = encampment_string.concat("'");
encampment_string = "'".concat(encampment_string);
var swatches = <%= render partial: "swatch_list"%>
var clicked = ["f", 1];
var placing = "f";
var exception;
var level = "globe";
var english_level = "globe";
var clear_create_canvas
var trading = false;
var selected;
var stop = false
var zooming = true
var alerting = "nil";
var alertContext="nil"
var visibleObjects = {encampment:[],fort:[]};
seapoints = [];
var changeLeg = [false,-1]
itinerary = [];
// Defining lists of territories and continents with their active color values and their starting points.

	var colors = {central_america:[ [0xe5,0x42,0x42], [488,780] ,[0.311006362]],
central_asia:[[0xf1,0x71,0x71], [2054,526] ,[0.284473688]],
 central_south_america:[[0xfb,0x07,0x07], [822,1020],[0.402101331]], 
china:[[0xfb,0x07,0xca], [2342,542] ,[0.073106002]], 
coastal_africa:[[0xd0,0x2e,0xb0], [1436,959] ,[0.653478724]], 
coastal_south_america:[[0xc4,0x56,0xae], [908,1340] ,[1.025283875]],
 congo:[[0x87,0x13,0x70], [1720,1015] ,[4.093718719]], 
eastern_africa:[[0x96,0x0e,0xbd], [1844,887] ,[3.45647866]], 
eastern_canada:[[0xc1,0x52,0xe1], [394,206] ,[0.338781336]], 
eastern_south_america:[[0xc6,0x00,0xff], [904,1088] ,[1.078443444]], 
egypt:[[0x5d,0x1e,0x6f], [1724,774] ,[0.143233025]], 
greenland:[[0x48,0x0e,0xcb], [918,204] ,[1]],
 iceland:[[0x84,0x55,0xef], [1393,399] ,[0.566702988]],
 india:[[0x32,0x3a,0xde], [2278,786] ,[0.023725458]], 
indonesia:[[0x5f,0x65,0xd0], [2558,1084] ,[0.177003406]], 
madagascar:[[0x5f,0xa4,0xd0], [2052,1280] ,[2.751700999]],
 middle_east:[[0x0f,0x97,0xed], [1868,664] ,[0.218084511]], 
mongolia:[[0x33,0x79,0xa6], [2480,568] ,[8.573449039]], 
new_zealand:[[0x06,0xb5,0x6d], [3010,1163] ,[0.292389938]],
non_contiguous_united_states:[[0x7e,0xc2,0xed], [0,340] ,[1.555525194]],
 northeastern_united_states:[[0x30,0xcf,0xd5], [704,596] ,[0.02432892]], 
northern_australia:[[0x6b,0xf6,0xfb], [2872,1260] ,[1.060924816]], 
northern_europe:[[0x22,0x7f,0x82], [1647,500] ,[0.03048697]],
 northwestern_united_states:[[0x67,0x91,0x93], [414,598] ,[0.145380297]], 
pacific_asia:[[0x73,0xe1,0xb4], [2834,526] ,[0.014887273]], 
 russia:[[0x23,0xab,0x73], [1902,206] ,[0.484910872]],
 sahara:[[0x23,0xab,0x33], [1454,730] ,[1.277875253]], 
southeastern_asia:[[0x7b,0xe1,0x87], [2406,800] ,[0.123679885]], 
southeastern_united_states:[[0x00,0xff,0x1e], [718,734] ,[0.03018645]], 
southern_african_territory:[[0x19,0x77,0x24], [1732,1242] ,[0.986084614]],
 southern_australia:[[0x50,0x7E,0x55], [2714,1296] ,[0.442689699]], 
southern_europe:[[0x8f,0xc6,0x40], [1688,602] ,[0.035175045]], 
southwestern_united_states:[[0x51,0x8a,0x00], [406,660] ,[0.059710917]],
 ukraine:[[0x97,0xde,0x32], [1660,340] ,[0.076732312]], 
united_kingdom:[ [0x19,0xaf,0xe0], [1522,490] ,[0.01625007]],
 western_europe:[[0x8a,0xa6,0x33], [1520,578] ,[0.018317252]],
 western_canada:[ [0xff,0xea,0x3d], [250,349] ,[1.358437809]], 
western_south_america:[[0xea,0xdb,0x35], [834,1143] ,[2.043553816]]};

	var color_key = {asia:[ [0x32,0x7c,0x00], [1844,226], [1662,1018]], australia:[ [0x00,0x7c,0x78], [2546,1080], [868,640]], africa:[ [0x2f,0x44,0x5a], [1444,724], [722,842]], europe:[ [0x5a,0x4c,0x2f], [1390,332], [654,442]], north_america:[ [0x43,0x5a,0x2f], [0,178], [1532,912]], south_america:[ [0x53,0x2f,0x5a], [798,1008], [528,786]]};

// order asia australia africa e na sa 

var continents ={ asia:["central_asia","china","southeastern_asia","russia","mongolia","pacific_asia","india","middle_east"],
australia:["northern_australia","southern_australia","new_zealand","indonesia"],
africa:["sahara","egypt","congo","eastern_africa","southern_african_territory","madagascar","coastal_africa"],
europe:["northern_europe","southern_europe","western_europe","ukraine","united_kingdom","iceland"],
north_america:["northeastern_united_states","northwestern_united_states","southeastern_united_states","southwestern_united_states","eastern_canada","western_canada","greenland","central_america","non_contiguous_united_states"],
south_america:["coastal_south_america","eastern_south_america","western_south_america","central_south_america"]};





var previous_level = [];

$( document ).ready(function() {

//Initial Funtions
	function alertBox(text,tag,context) {
		alerting = tag
		alertContext = context
		$("#alertBox").children("p").text(text) 
		centerAlertBox()
		$("#alertBox").css("display","inline")

		$(".alertButton").click( function() {
			$("#alertBox").css("display","none")
			alerting ="nil"
			alertContext="nil"
		});
	}
	function centerAlertBox() {

		$("#alertBox").css("margin-left",($("#background").width()/2) - ($("#alertBox").width()/2) - $("#alertBox").offset().left + "px")
		$("#alertBox").css("margin-top",($("#background").height()/2) - ($("#alertBox").height()/2) -  $("#alertBox").offset().top + "px")
	
	}
	function setOriginalZoom() {
		$("#title").css("margin-left", ($("#title").width()/$(window).width()*100)/1.5 + "%")
		$(".territoryImage").attr("viewBox", "0 0 " + $(window).width()*0.85 + " " + $(window).height()*0.90);
		$(".territoryImage").attr("width", $(".territoryImage").attr("viewBox").split(" ")[2]);
		$(".territoryImage").attr("height", $(".territoryImage").attr("viewBox").split(" ")[3]);
		$("#sidePanel").css("height", $(".territoryImage").height())
		$("#background").css("width", $(".territoryImage").width())
		$("#renderedSprites").css("height", $(".territoryImage").height())
		$("#renderedSprites").css("width", $(".territoryImage").width())
		$("#background").css("height", $(".territoryImage").height())
		$(".filter").css("width", $(".territoryImage").width())
		$(".filter").css("height", $(".territoryImage").height())
		$("g").attr("transform", "scale(" + $(".territoryImage").attr("viewBox").split(" ")[2]/3508 + ")")
		$("#globalSVG").children("g").attr("transform", $("#globalSVG").children("g").attr("transform") + " translate(0 " + (($("#background").height()/2) - ($("#globalSVG")[0].getBoundingClientRect().height/2) + ($("#globalSVG").offset().top - $("#background").offset().top))/(($(".territoryImage").attr("viewBox").split(" ")[2]/3508)*2) + ")")
		for (i = 0; i < $(".button").length; i++) {
			$($(".button")[i])
		} 
		centerAlertBox()
	}

	function colorMap() {
		for (i = 0; i < territoryColors.length; i++) {
			color = "L" + territoryColors[i][1][0].toString(16) + territoryColors[i][1][1].toString(16) + territoryColors[i][1][2].toString(16)
			color = color.replace("0","00").toUpperCase()
			color = swatches[territoryColors[i][0].replace("#","")][color];

			$(territoryColors[i][0]).css("fill", "#" + color)
		}
	}

//End of Initial Funtions

//Contributing Zoom Funtions

function renderObject(object,levelInfo,remove) {

		if (remove == true) {
			$("#renderedSprites").children().remove();
		}
		for (i = 0; i < $("#renderedSprites").length; i++) {
			if ( "seapoint" == $("#renderedSprites")[i].id.replace(/[0-9]/g, '')) {
				$($("#renderedSprites")[i]).remove();
			}
		}
		var list;

		if (object == "encampment") {
			list = rendered_encampments; 
		}
		else if (object == "fort") {
			list = rendered_forts; 
		}

		var sortedList = [];

		if (levelInfo[0] == "territorial") {
			for (i = 0; i < list.length; i++) {
				if (list[i][0].territory == levelInfo[1]) {
					sortedList.push(list[i]);
				}
			}
		}

		else if (levelInfo[0] == "continental") {
			for (i = 0; i < continents[$("#continentalSVG").children("g").children("path").attr("class")].length; i++) {
				for (y = 0; y < list.length; y++) {
					if (list[y][0].territory == "#" + continents[$("#continentalSVG").children("g").children("path").attr("class")][i]) {
						sortedList.push(list[y]);
					}
				}
			}

		}
		else if (levelInfo[0] == "global") {
			sortedList = list
		}
		
		visibleObjects[object] = sortedList;

		for (i = 0; i < sortedList.length; i++) {
			if (levelInfo[0] == "territorial") {
				
				if (sortedList[i][1] != "sel" && sortedList[i][1] != "selpast") {
					$("#renderedSprites").append($("#sprites").children("#".concat(object)).clone().attr("class","renderedSprite").attr("id",object + i));
				}
				else {
					$("#renderedSprites").append($("#sprites").children("#".concat(object) + sortedList[i][1]).clone().attr("class","renderedSprite").attr("id",object + i));	
				}

				var xPosition = (sortedList[i][0].xco*$("#territorialSVG").children("g").attr("transform").split("(")[1].split(")")[0]) + $("#territorialSVG").offset().left - $("#background").offset().left
				var yPosition = (sortedList[i][0].yco*$("#territorialSVG").children("g").attr("transform").split("(")[1].split(")")[0]) + $("#territorialSVG").offset().top - $("#background").offset().top

				$("#" + object + i).css("top",yPosition + "px").css("left",xPosition + "px")

			}
			if (levelInfo[0] == "continental") {

				if (sortedList[i][1] != "sel" && sortedList[i][1] != "selpast") {
					$("#renderedSprites").append($("#sprites").children("#".concat(object + "Medium")).clone().attr("class","renderedSprite").attr("id",object + i));
				}
				else {
					$("#renderedSprites").append($("#sprites").children("#".concat(object)+ sortedList[i][1] + "Medium" ).clone().attr("class","renderedSprite").attr("id",object + i));	
				}

				var xPosition = ((sortedList[i][0].xco + colors[sortedList[i][0].territory.replace("#","")][1][0] - color_key[$($("#continentalSVG").children("g").children("path")[0]).attr("class")][1][0])*$("#continentalSVG").children("g").attr("transform").split("(")[1].split(")")[0]) + $("#continentalSVG").offset().left - $("#background").offset().left
				var yPosition = ((sortedList[i][0].yco + colors[sortedList[i][0].territory.replace("#","")][1][1] - color_key[$($("#continentalSVG").children("g").children("path")[0]).attr("class")][1][1])*$("#continentalSVG").children("g").attr("transform").split("(")[1].split(")")[0]) + $("#continentalSVG").offset().top - $("#background").offset().top
				$("#" + object + i).css("top",yPosition + "px").css("left",xPosition + "px")

			}
			if (levelInfo[0] == "global") {
				if (sortedList[i][1] != "sel" && sortedList[i][1] != "selpast") {
					$("#renderedSprites").append($("#sprites").children("#".concat(object) + "Small").clone().attr("class","renderedSprite").attr("id",object + i));
				}
				else {
					$("#renderedSprites").append($("#sprites").children("#".concat(object) + sortedList[i][1] + "Small").clone().attr("class","renderedSprite").attr("id",object + i));	
				}


				var xPosition = (sortedList[i][0].xco + colors[sortedList[i][0].territory.replace("#","")][1][0])*($("#globalSVG").children("g").attr("transform").split("(")[1].split(")")[0])
				var yPosition = (sortedList[i][0].yco + colors[sortedList[i][0].territory.replace("#","")][1][1] + parseFloat($("#globalSVG").children("g").attr("transform").split("translate(")[1].split(" ")[1]))*($("#globalSVG").children("g").attr("transform").split("(")[1].split(")")[0])
				$("#" + object + i).css("top",yPosition + "px").css("left",xPosition + "px")

			}

			$("#renderedSprites").css("z-index","10")
		}

		if (trading == true && object =="encampment") {

			if (levelInfo[0] == "global") {

				for (i = 0; i < seapoints.length; i++) {

					$("#renderedSprites").append($("#sprites").children("#seapoint" + seapoints[i][1]).clone().attr("class","renderedSprite").attr("id","seapoint" + i));
					$("#" + "seapoint" + i).css("top",seapoints[i][0].yco - $("#background").offset().top+ "px").css("left",seapoints[i][0].xco - $("#background").offset().left - 42 + "px")	

				}
			}

		}
	}

	function levelChange(zoomLevel) {

		renderObject("encampment",zoomLevel,true);
		renderObject("fort",zoomLevel);
		if (zoomLevel[0] == "global") {

		}
		else if (zoomLevel[0] == "continental") {
			$(".newObjectButton").css("display","none")
		}
		else if (zoomLevel[0] == "territorial") {

				$(".newObjectButton").css("display","inline")
		}

	}

//End of Contributing Zoom Funtions


//Object Funtions

	function deselect() {

		for (i = 0; i < rendered_forts.length; i++) {

			if (rendered_forts[i][1] == "sel") {

				rendered_forts[i][1] = "selpast"
			}
		}
		for (i = 0; i < rendered_encampments.length; i++) {

			if (rendered_encampments[i][1] == "sel") {

				rendered_encampments[i][1] = "selpast"
			}
		}
		for (i = 0; i < seapoints.length; i++) {

			if (seapoints[i][1] == "sel") {

				seapoints[i][1] = "selpast"
			}
		}

	}

	function createObject(object) {

		$(".newObjectButton").css("display", "none")
		$(".fields").css("display","inline")

		$(".fields").not("#" + object + "_fields").remove()
		if ($(".fields").length > 1) { 

			$($(".fields")[1]).remove()
		}

		$("#cancelCreation").css("display","inline")

		if (object == "fort") {

			placeObject(object)
		}
		else if (object == "encampment") {

			placeObject(object)
		}
		else if (object == "trade") {

			mapTrade(object)
		}

	}
	
	function changeSel(object,indexInList) {

		deselect()
			if (object == "seapoint") {
				seapoints[indexInList][1] = "sel"
			}
			else if (object.id.replace(/[0-9]/g, '') == "fort") {

				rendered_forts[indexInList][1] = "sel"

			}
			else if (object.id.replace(/[0-9]/g, '') == "encampment") {

				rendered_encampments[indexInList][1] = "sel"

			}

			renderObject("encampment",zoomLevel,true);
			renderObject("fort",zoomLevel);
	}

	function selectFirst() {

		deselect()
			for (var i = 0; i < rendered_forts.length; i++) {

				if (typeof itinerary[itinerary.length - 1][rendered_forts[i][0].date.toString()] !== 'undefined') {

					rendered_forts[i][1] = "sel"

					return	
				}
			}
			for (i = 0; i < seapoints.length; i++) {

				if (seapoints[i][0]["xco"] == itinerary[itinerary.length - 1][0]["xco"]) {

					seapoints[seapoints.length - 1][1] = "sel"
					return	
				}
			}
			for (var i = 0; i < rendered_encampments.length; i++) {

				if (typeof itinerary[itinerary.length - 1][rendered_encampments[i][0].date.toString()] !== 'undefined') {

					rendered_encampments[i][1] = "sel"
					return	
				}
			}

			changeLeg[0] = false
	}

	function mapTrade(object) {
		trading = true
		
		$("#alertConfirm").click( function() {

			if (alerting == "seapoint") {

				deselect()
				if (changeLeg[0] == false) {
					itinerary.push([{xco:alertContext.pageX,yco:alertContext.pageY,territory:"global"},"seapoint"])
					seapoints.push([{xco:alertContext.pageX,yco:alertContext.pageY,territory:"global"},"sel"])
				}
				else if (changeLeg[0] == true) {

					itinerary[changeLeg[1]] = [{xco:alertContext.pageX,yco:alertContext.pageY},"seapoint"]
					seapoints[changeLeg[2]] = [{xco:alertContext.pageX,yco:alertContext.pageY},"sel"]

					if (changeLeg[3] == "encampment") {
						rendered_encampments[changeLeg[2]].splice(1,1)
					}
					else if (changeLeg[3] == "fort") {
						rendered_forts[changeLeg[2]].splice(1,1)
					}

				}
				renderObject("encampment",zoomLevel,true);
				renderObject("fort",zoomLevel);
			}
	
		});

		if (zoomLevel[0] == "territorial") {

			$("svg").click( function(e) {

				$("#renderedSprites").css("pointer-events","auto")

				if ($(document.elementFromPoint(e.pageX, e.pageY)).attr("class") == "renderedSprite" && zoomLevel[0] != "global") {

					var checkpoint = document.elementFromPoint(e.pageX, e.pageY)

					var objectInCompleteList
					var completeList

					if (checkpoint.id.replace(/[0-9]/g, '') == "fort") {

						completeList = rendered_forts

						for (var i = 0; i < rendered_forts.length; i++) {

							if (rendered_forts[i][0].date == visibleObjects[checkpoint.id.replace(/[0-9]/g, '')][parseInt(checkpoint.id.replace(/\D/g,''))][0].date) {

								objectInCompleteList = i;

								if (rendered_forts[i][1] == 'selpast' || rendered_forts[i][1] == 'sel') {

									for (y = 0; y < itinerary.length; y++) {

										if ((typeof itinerary[y][rendered_forts[i][0].date.toString()] !== "undefined" &&  rendered_forts[i][1] == 'selpast') || (itinerary[y][rendered_forts[i][0].date.toString()] !== "undefined" &&  rendered_forts[i][1] == 'sel' && y - 1 == itinerary.length)) {

											changeSel(checkpoint,i)
											changeLeg = [true,y,i,"fort"]
										}
										else if (typeof itinerary[y][rendered_forts[i][0].date.toString()] !== "undefined" && rendered_forts[i][1] == 'sel') {

											selectFirst()
											changeLeg[0] = false
										}
										
									}
								}
							}
						}
					}

					else if (checkpoint.id.replace(/[0-9]/g, '') == "encampment") {

						completeList = rendered_encampments

						for (var i = 0; i < rendered_encampments.length; i++) {

							if (rendered_encampments[i][0].date == visibleObjects[checkpoint.id.replace(/[0-9]/g, '')][parseInt(checkpoint.id.replace(/\D/g,''))][0].date) {

								objectInCompleteList = i;

								if (rendered_encampments[i][1] == 'selpast' || rendered_encampments[i][1] == 'sel') {

									for (y = 0; y < itinerary.length; y++) {

										if ((typeof itinerary[y][rendered_encampments[i][0].date.toString()] !== "undefined" &&  rendered_encampments[i][1] == 'selpast') || (itinerary[y][rendered_encampments[i][0].date.toString()] !== "undefined" &&  rendered_encampments[i][1] == 'sel' && y - 1 == itinerary.length)) {

											changeSel(checkpoint,i)
											changeLeg = [true,y,i,"encampment"]
										}
										else if (typeof itinerary[y][rendered_encampments[i][0].date.toString()] !== "undefined" && rendered_encampments[i][1] == 'sel') {
											selectFirst()
											changeLeg[0] = false
										}
							
									}
								}
							}
						}
					}

					if (typeof completeList[objectInCompleteList][1] === 'undefined'){
						$("#create_leg").click();


						//Put the thing in itinerary under its date - Fucked up shit if you ask me

						var idDate = visibleObjects[checkpoint.id.replace(/[0-9]/g, '')][parseInt(checkpoint.id.replace(/\D/g,''))][0].date.toString()
						var objectInfo = visibleObjects[checkpoint.id.replace(/[0-9]/g, '')][parseInt(checkpoint.id.replace(/\D/g,''))][0]
						var tempObject =  {}
						tempObject[idDate] = objectInfo
						if (changeLeg[0] == false) {

							itinerary.push(tempObject)

						}
						else {

							itinerary[changeLeg[1]] = tempObject


							if (changeLeg[3] == "encampment") {
								rendered_encampments[changeLeg[2]].splice(1,1)
							}
							else if (changeLeg[3] == "fort") {
								rendered_forts[changeLeg[2]].splice(1,1)
							}
							else if (changeLeg[3] == "seapoint") {
							        seapoints.splice(changeLeg[2], 1);
							}
						}

						deselect()

						for (i = 0; i < rendered_forts.length; i++) {
							if (rendered_forts[i][0].date == visibleObjects[checkpoint.id.replace(/[0-9]/g, '')][parseInt(checkpoint.id.replace(/\D/g,''))][0].date) {
								rendered_forts[i].push("sel")
								if (changeLeg[0] == true) {
									changeLeg[3] = "fort"
									changeLeg[2] = i
								}


							}
						}
						for (i = 0; i < rendered_encampments.length; i++) {
							if (rendered_encampments[i][0].date == visibleObjects[checkpoint.id.replace(/[0-9]/g, '')][parseInt(checkpoint.id.replace(/\D/g,''))][0].date) {
								rendered_encampments[i].push("sel")
								if (changeLeg[0] == true) {
									changeLeg[3] = "encampment"
									changeLeg[2] = i
								}	

							}
						}
					}

				}
				renderObject("encampment",zoomLevel,true);
				renderObject("fort",zoomLevel);

				renderTrade(itinerary)

				$("#renderedSprites").css("pointer-events","none")
			})

		}
	}

	function renderTrade(itinerary) {

		var oldxco
		var oldyco
		var oldObject

		for (var i = 0; i < itinerary.length; i++) {
			

			var currentObject
			var xco
			var yco

 			if (typeof itinerary[i][1] === "undefined") {

				for (var key in itinerary[i]) {

					xco = itinerary[i][key]["xco"] + colors[itinerary[i][key]["territory"].replace("#","")][1][0]
					yco = itinerary[i][key]["yco"] + colors[itinerary[i][key]["territory"].replace("#","")][1][1]
				}
				currentObject = itinerary[i][key]
			}
			else {

				xco = itinerary[i][0]["xco"]
				yco = itinerary[i][0]["yco"]

				currentObject = itinerary[i][0]
			}
			if (i != 0) {

				if (zoomLevel[0] == "global") {

					if (typeof currentObject["territory"] !== "undefined") {

					xco = xco + colors[currentObject["territory"].replace("#","")][1][0] 
					yco = yco + colors[currentObject["territory"].replace("#","")][1][1]  

					}

					var transform = parseFloat($("#globalSVG").children("g").attr("transform").split(" ")[2].replace(")",""))
					var scaleFactor =  parseFloat($("#globalSVG").children("g").attr("transform").split(") ")[0].replace("scale(",""))
					var topLine = $("#globalSVG").children("g").attr("transform").split(", -")[0] + ", " + transform + 1/scaleFactor + ")" 
					var bottomLine = $("#globalSVG").children("g").attr("transform").split(", -")[0] + ", " + transform - 1/scaleFactor + ")"

					$("#globalSVG").append($("#globalSVG").children("g").clone().attr("id","traderoute").html('<path d="M' + oldxco + ' ' +oldyco + ' C ' + (oldxco + xco)/4 + ' ' + (oldyco + yco)/4 +', ' +(oldxco + xco)/0.75 + ' ' + (oldyco + yco)/0.75+ ', ' + xco+ ' ' +yco + '" stroke="white"/>'))

					$("#globalSVG").append($("#globalSVG").children("g").clone().attr("id","traderoute").attr("transform",bottomLine).html('<path d="M' + oldxco + ' ' +oldyco + ' C ' + (oldxco + xco)/4 + ' ' + (oldyco + yco)/4 +', ' +(oldxco + xco)/0.75 + ' ' + (oldyco + yco)/0.75+ ', ' + xco+ ' ' +yco + '" stroke="black"/>'))

					$("#globalSVG").append($("#globalSVG").children("g").clone().attr("id","traderoute").attr("transform",topLine).html('<path d="M' + oldxco + ' ' +oldyco + ' C ' + (oldxco + xco)/4 + ' ' + (oldyco + yco)/4 +', ' +(oldxco + xco)/0.75 + ' ' + (oldyco + yco)/0.75+ ', ' + xco+ ' ' +yco + '" stroke="black"/>')) 

				}
				if (zoomLevel[0] == "continental") {
					console.log(zoomLevel)
					if (typeof itinerary[i][1] === "undefined") {

						for (var y = 0; y < continents[zoomLevel[1]].length; y++) {

							if (continents[zoomLevel[1]][y] == currentObject["territory"].replace("#","") || continents[zoomLevel[1]][y] == oldObject["territory"].replace("#","")) {

								xco = xco + colors[currentObject["territory"].replace("#","")][1][0] - color_key[zoomLevel[1]][1][0]
								yco = yco + colors[currentObject["territory"].replace("#","")][1][1] - color_key[zoomLevel[1]][1][1]
								var transform = parseFloat($("#continentalSVG").children("g").attr("transform").split(" ")[2].replace(")",""))
								var scaleFactor = parseFloat($("#continentalSVG").children("g").attr("transform").split(") ")[0].replace("scale(",""))
								var topLine = $("#continentalSVG").children("g").attr("transform").split(", -")[0] + ", " + transform + 1/scaleFactor + ")" 
								var bottomLine = $("#continentalSVG").children("g").attr("transform").split(", -")[0] + ", " + transform - 1/scaleFactor + ")"
								$("#continentalSVG").append($("#continentalSVG").children("g").clone().attr("id","traderoute").html('<path d="M' + oldxco + ' ' +oldyco + ' C ' + (oldxco + xco)/4 + ' ' + (oldyco + yco)/4 +', ' +(oldxco + xco)/0.75 + ' ' + (oldyco + yco)/0.75+ ', ' + xco+ ' ' +yco + '" stroke="white"/>'))

								$("#continentalSVG").append($("#continentalSVG").children("g").clone().attr("id","traderoute").attr("transform",bottomLine).html('<path d="M' + oldxco + ' ' +oldyco + ' C ' + (oldxco + xco)/4 + ' ' + (oldyco + yco)/4 +', ' +(oldxco + xco)/0.75 + ' ' + (oldyco + yco)/0.75+ ', ' + xco+ ' ' +yco + '" stroke="black"/>'))

								$("#continentalSVG").append($("#continentalSVG").children("g").clone().attr("id","traderoute").attr("transform",topLine).html('<path d="M' + oldxco + ' ' +oldyco + ' C ' + (oldxco + xco)/4 + ' ' + (oldyco + yco)/4 +', ' +(oldxco + xco)/0.75 + ' ' + (oldyco + yco)/0.75+ ', ' + xco+ ' ' +yco + '" stroke="black"/>')) 
							}
						}
					}

				}
				if (zoomLevel[0] == "territorial") {
					if (typeof itinerary[i][1] === "undefined") {
						if (zoomLevel[1] == currentObject["territory"] || zoomLevel[1] == oldObject["territory"]) {

							var transform = parseFloat($("#territorialSVG").children("g").attr("transform").split(" ")[2].replace(")",""))
							var scaleFactor = parseFloat($("#territorialSVG").children("g").attr("transform").split(") ")[0].replace("scale(",""))
							var topLine = $("#territorialSVG").children("g").attr("transform").split(", -")[0] + ", " + (transform + (1/scaleFactor)) + ")" 
							var bottomLine = $("#territorialSVG").children("g").attr("transform").split(", -")[0] + ", " + (transform - (1/scaleFactor)) + ")"

							console.log(oldxco,oldyco )

							$("#territorialSVG").append($("#territorialSVG").children("g").clone().attr("id","traderoute").html('<line x1="0" y1="0" x2="200" y2="200" style="stroke:rgb(255,0,0);stroke-width:2" />'))

							$("#territorialSVG").append($("#territorialSVG").children("g").clone().attr("id","traderoute").attr("transform",bottomLine).html('<path d="M' + oldxco + ' ' +oldyco + ' C ' + ((oldxco + xco)/4) + ' ' + ((oldyco + yco)/4) +', ' +((oldxco + xco)/0.75) + ' ' + ((oldyco + yco)/0.75)+ ', ' + xco+ ' ' +yco + '" stroke="black"/>'))

							$("#territorialSVG").append($("#territorialSVG").children("g").clone().attr("id","traderoute").attr("transform",topLine).html('<path d="M' + oldxco + ' ' +oldyco + ' C ' + ((oldxco + xco)/4) + ' ' + ((oldyco + yco)/4) +', ' +((oldxco + xco)/0.75) + ' ' + ((oldyco + yco)/0.75)+ ', ' + xco+ ' ' +yco + '" stroke="black"/>')) 

						}
					}
				}

			}
			oldxco = xco
			oldyco = yco
			oldObject = currentObject

		}
	}

	function placeObject(object) {
		
		var canceled = false
		zooming = false
		var followMouse = true
		var x
		var y
			if (object == "fort") {

				newObject = {name:"",
				 ownership:"",
				 territory: "#" + $("#territorialSVG").children("g").children("path").attr("id"),
				 xco:"",
				 yco:"",
				 owner:<%= @user.id %>,
				 date:""}

			}
			else if (object == "encampment") {

				newObject = {name:"",
				 territory: "#" + $("#territorialSVG").children("g").children("path").attr("id"),
				 xco:"",
				 yco:"",
				 owner:<%= @user.id %>,
				 date:""}


			}

		$("#renderedSprites").append($("#" + object).clone().attr("id","curser" + object))
		$("#curser" + object).css("display","inline")
		$("#submitObject").css("display","inline")

		$("#territorialSVG").mousemove( function(e) {

			if (followMouse == true) {

				$("#curser" + object).css("top", e.pageY - $("#background").offset().top - 32)
				$("#curser" + object).css("left", e.pageX - $("#background").offset().left - 32)
			}

		});
		
		$("path").click(function(e){
			if (zooming == false && newObject != rendered_forts[rendered_forts.length - 1] && newObject != rendered_encampments[rendered_encampments.length - 1]) {

				x = ((parseInt($("#curser" + object).css("left")) -  ($("#territorialSVG").children("g").children("path").position().left))/parseFloat($("#territorialSVG").children("g").attr("transform").split("(")[1].split(")")[0]))

				y =  ((parseInt($("#curser" + object).css("top")) - ($("#territorialSVG").children("g").children("path").offset().top - $("#background").offset().top))/parseFloat($("#territorialSVG").children("g").attr("transform").split("(")[1].split(")")[0]))

				followMouse = false
				$("#curser" + object).css("pointer-events","auto");
			}

		});
		
		$("#curser" + object).click( function() {
			followMouse = true
			$("#curser" + object).css("pointer-events","none");
		})


		$("#submitObject").click( function() { 
			if (canceled == false) {
				if (object == "fort") {

					newObject = {name:$("#user_forts_attributes_100000000000_name").val(),
					 ownership:$("#user_forts_attributes_100000000000_ownership").val(),
					 territory: "#" + $("#territorialSVG").children("g").children("path").attr("id"),
					 xco:x,
					 yco:y,
					 owner:<%= @user.id %>,
					 date:new Date().getTime()}

					$("#user_forts_attributes_100000000000_date_created").val(newObject.date)
					$("#user_forts_attributes_100000000000_xco").val(newObject.xco)
					$("#user_forts_attributes_100000000000_yco").val(newObject.yco)
					$("#user_forts_attributes_100000000000_territory").val(newObject.territory)

					rendered_forts.push([newObject])

				}
				else if (object == "encampment") {

					newObject = {name:$("#user_encampments_attributes_100000000000_name").val(),
					 territory: "#" + $("#territorialSVG").children("g").children("path").attr("id"),
					 xco:x,
					 yco:y,
					 owner:<%= @user.id %>,
					 date:new Date().getTime()}

					$("#user_encampments_attributes_100000000000_date_created").val(newObject.date)
					$("#user_encampments_attributes_100000000000_xco").val(newObject.xco)
					$("#user_encampments_attributes_100000000000_yco").val(newObject.yco)
					$("#user_encampments_attributes_100000000000_territory").val(newObject.territory)

					rendered_encampments.push([newObject])
				}

				renderObject("encampment",zoomLevel,true);
				renderObject("fort",zoomLevel);

				$(".fields").css("display","none")
				$("#curser" + object).remove()
				$("#submitObject").css("display","none")
				$("#cancelCreation").css("display","none")
				$("#curser" + object).css("pointer-events","none");
				$(".newObjectButton").css("display", "inline")
				zooming = true
			}
		});
		
		$("#cancelCreation").click( function() { 

			$(".fields").remove()	
			$("#curser" + object).remove()	
			$("#curser" + object).css("pointer-events","none");
			$("#curser" + object).css("display","none")
			$("#submitObject").css("display","none")
			$("#cancelCreation").css("display","none")
			$(".newObjectButton").css("display", "inline")
			zooming = true
			canceled = true
		});

				

	}
//End of Object Funtions


//Calls of Initial Functions
	colorMap();
	setOriginalZoom();

	var pathClicked;
	var zoomLevel = ["global","globe"];
	levelChange(zoomLevel)
//End of Initial Function Calls


//Object Creation

$(".newObjectButton").click( function() {

	createObject($(this).attr("id").replace("create_",""))

}); 

//End of Object Creation


//Zooming


		$("svg").on('click','path',function(e){

			if (zooming == true) {

				if (zoomLevel[0] == "global") {
					var continent = $("." + $(this).attr("class"))
					for (i = 0; i < continent.length; i++) {
						$("#continentalSVG").append($(continent[i]).parent().clone())
					}

					var box = $("#continentalSVG")[0].getBoundingClientRect()
					var newScaleFactor
					if (box.width/$(window).width() > box.height/$(window).height()) {
						newScaleFactor = ($("#background").width()*parseFloat($("#continentalSVG").children("g").attr("transform").split(")")[0].replace("scale(","")))/box.width*0.95;
					}
					else {
						newScaleFactor = ($("#background").height()*parseFloat($("#continentalSVG").children("g").attr("transform").split(")")[0].replace("scale(","")))/box.height*0.95;
					}

					$("#continentalSVG").children("g").attr("transform","scale(" + newScaleFactor + ")");
					var scaledBox = $("#continentalSVG").offset();
					scaledBox.top = ((scaledBox.top - $("#background").offset().top)/newScaleFactor) - (($("#background").height()/2) - ($("#continentalSVG")[0].getBoundingClientRect().height/2))
					scaledBox.left = ((scaledBox.left - $("#background").offset().left)/newScaleFactor) - (($("#background").width()/2) - ($("#continentalSVG")[0].getBoundingClientRect().width/2))
					$("#continentalSVG").children("g").attr("transform", $("#continentalSVG").children("g").attr("transform") + " translate(" + -1*scaledBox.left + ", " + -1*scaledBox.top + ")")
					$("#continentalSVG").css("z-index","2");
					$("#continentFilter").css("display","inline");
					zoomLevel = ["continental",$(continent).attr("class")];
					console.log(zoomLevel)
					levelChange(zoomLevel)
				}
				else if (zoomLevel[0] == "continental") {
					var territory = "#" + document.elementFromPoint(e.pageX,e.pageY).id;
					$("#territorialSVG").append($(territory).parent().clone())
					var box = $("#territorialSVG")[0].getBoundingClientRect();
					var newScaleFactor
					if (box.width/$(window).width() > box.height/$(window).height()) {
						newScaleFactor = ($("#background").width()*parseFloat($("#territorialSVG").children("g").attr("transform").split(")")[0].replace("scale(","")))/box.width*0.95;
					}
					else {
						newScaleFactor = ($("#background").height()*parseFloat($("#territorialSVG").children("g").attr("transform").split(")")[0].replace("scale(","")))/box.height*0.95;
					}
					$("#territorialSVG").children("g").attr("transform","scale(" + newScaleFactor + ")");
					var scaledBox = $("#territorialSVG").offset()
					scaledBox.top = ((scaledBox.top - $("#background").offset().top)/newScaleFactor) - ($("#background").height() - ($("#territorialSVG")[0].getBoundingClientRect().height))/(newScaleFactor*2)
					scaledBox.left = ((scaledBox.left - $("#background").offset().left)/newScaleFactor) - ($("#background").width() - ($("#territorialSVG")[0].getBoundingClientRect().width))/(newScaleFactor*2)
			
					$("#territorialSVG").children("g").attr("transform", $("#territorialSVG").children("g").attr("transform") + " translate(" + -1*scaledBox.left + ", " + -1*scaledBox.top + ")")
					$("#territorialSVG").css("z-index","4");
					$("#territoryFilter").css("display","inline");
					zoomLevel = ["territorial",territory, zoomLevel[1]];
					console.log(zoomLevel)
					levelChange(zoomLevel)
				}
				pathClicked = true
			}
			else if (zooming = false) {
				
			}
		});
		
			$("svg").click( function(e) {

				if (pathClicked != true && zooming == true) {
					if (zoomLevel[0] == "continental") {
						$("#continentalSVG").children().remove();
						$("#continentFilter").css("display","none");
						$("#continentalSVG").css("z-index","-1");
						zoomLevel = ["global","globe"];
					}
					else if (zoomLevel[0] == "territorial") {
						$("#territorialSVG").children().remove();
						$("#territoryFilter").css("display","none");
						$("#territorialSVG").css("z-index","-1");
						$("#continentalSVG").css("z-index","2");
					console.log(zoomLevel)
						zoomLevel = ["continental", zoomLevel[2]];
					}
					else if (zoomLevel[0] == "global") {
				
						if (trading == true) {
							$("#renderedSprites").css("pointer-events","auto");

							if (document.elementFromPoint(e.pageX,e.pageY).id.replace(/[0-9]/g, '') == "seapoint") {

								if (seapoints[document.elementFromPoint(e.pageX,e.pageY).id.replace(/\D/g,'')][1] == "selpast" || seapoints[document.elementFromPoint(e.pageX,e.pageY).id.replace(/\D/g,'')][1] == "sel") {
									for (i = 0; i < itinerary.length; i++) {

										if (typeof itinerary[i][1] !== "undefined" && itinerary[i][0]["xco"] == seapoints[document.elementFromPoint(e.pageX,e.pageY).id.replace(/\D/g,'')][0]["xco"] && (seapoints[document.elementFromPoint(e.pageX,e.pageY).id.replace(/\D/g,'')][1] == "selpast" || (seapoints[document.elementFromPoint(e.pageX,e.pageY).id.replace(/\D/g,'')][1] == "sel" && i - 1 == itinerary.length))) {

											changeLeg = [true,i,document.elementFromPoint(e.pageX,e.pageY).id.replace(/\D/g,''),"seapoint"]

											changeSel("seapoint",document.elementFromPoint(e.pageX,e.pageY).id.replace(/\D/g,''))

										}
										else if (typeof itinerary[i][1] !== "undefined" && seapoints[document.elementFromPoint(e.pageX,e.pageY).id.replace(/\D/g,'')][1] == "sel") {

										selectFirst("seapoint",itinerary)
										}
									}
								}
							}
							else if ($("#alertBox").css("display") == "none") {

								$("#renderedSprites").css("pointer-events","none");
								alertBox("Would you like to place a sea point?","seapoint",e)
							}

							$("#renderedSprites").css("pointer-events","none");
						}
					}
					levelChange(zoomLevel)
				}
				else if (pathClicked == true && zooming == true) {

					pathClicked = false;

				}
		});
});

//End of Zooming


</script>




<div id="sprites">
    <%= render partial: "sprites" %>
</div>

<%= image_tag("active_map.png", :class => "active", :id => "active") %>


<div class="test1"  width="100%" height="100%">
	<div id="renderedSprites"></div>
	<div id="background"></div>
	<div id="continentFilter" class="filter"></div>
	<div id="territoryFilter" class="filter"></div>
	<svg
    preserveAspectRatio="xMinYMin meet"
	class="territoryImage" 
	id="continentalSVG"></svg>
	<svg
    preserveAspectRatio="xMinYMin meet"
	class="territoryImage" 
	id="territorialSVG"></svg>
    <%= render partial: "images" %>
	
</div>
	<div id="sidePanel" class="box">
 	<div class="corner top right"></div>
	<div class="corner top left"></div>
	<div id="forms">
	    <%= render partial: "form" %>
	</div>
	<div class="corner bottom left"></div>
	<div class="corner bottom right"></div>
	</div>
<div id="alertBox" class="box">
 	<div class="corner top right"></div>
	<div class="corner top left"></div>
		<p></p>
		<div id="alertButtons">
			<button class="alertButton" id="alertConfirm">Confirm</button>
			<button class="alertButton" id="alertCancel">Cancel</button>
		</div>
	<div class="corner bottom left"></div>
	<div class="corner bottom right"></div>
</div>
<div class="test" style="color:red;"></div>
